<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lip&#39;s Blog</title>
  
  <subtitle>生如夏花，死如落叶</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-18T06:30:48.904Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lip</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter</title>
    <link href="http://yoursite.com/2020/08/18/Flutter-1/"/>
    <id>http://yoursite.com/2020/08/18/Flutter-1/</id>
    <published>2020-08-18T06:30:48.000Z</published>
    <updated>2020-08-18T06:30:48.904Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Flutter</title>
    <link href="http://yoursite.com/2020/08/18/Flutter/"/>
    <id>http://yoursite.com/2020/08/18/Flutter/</id>
    <published>2020-08-18T06:30:03.000Z</published>
    <updated>2020-08-18T06:30:39.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flutter栈还原"><a href="#Flutter栈还原" class="headerlink" title="Flutter栈还原"></a>Flutter栈还原</h2><h4 id="首先下载对应Flutter符号表"><a href="#首先下载对应Flutter符号表" class="headerlink" title="首先下载对应Flutter符号表"></a>首先下载对应Flutter符号表</h4><ul><li>查看电脑Flutter对应revision符号表名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Flutter --version</span><br><span class="line"></span><br><span class="line">Flutter 1.12.13+hotfix.7 • channel unknown • unknown source</span><br><span class="line">Framework • revision 9f5ff2306b (5 months ago) • 2020-01-26 22:38:26 -0800</span><br><span class="line">Engine • revision a67792536c</span><br><span class="line">Tools • Dart 2.7.0</span><br></pre></td></tr></table></figure><ul><li>在以下地址所说对应a67792536c</li></ul><p><a href="https://console.cloud.google.com/storage/browser/flutter_infra/flutter/">https://console.cloud.google.com/storage/browser/flutter_infra/flutter/</a></p><ul><li>使用atos命令还原Flutter栈信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">atos -arch arm64 -o ~&#x2F;Downloads&#x2F;Flutter.dSYM&#x2F;Contents&#x2F;Resources&#x2F;DWARF&#x2F;Flutter -l 0xxxxxxx</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Flutter栈还原&quot;&gt;&lt;a href=&quot;#Flutter栈还原&quot; class=&quot;headerlink&quot; title=&quot;Flutter栈还原&quot;&gt;&lt;/a&gt;Flutter栈还原&lt;/h2&gt;&lt;h4 id=&quot;首先下载对应Flutter符号表&quot;&gt;&lt;a href=&quot;#首先下载对</summary>
      
    
    
    
    <category term="Flutter" scheme="http://yoursite.com/categories/Flutter/"/>
    
    
  </entry>
  
  <entry>
    <title>OC动态机制</title>
    <link href="http://yoursite.com/2020/08/18/OC%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2020/08/18/OC%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/</id>
    <published>2020-08-18T06:18:05.886Z</published>
    <updated>2020-08-18T06:18:05.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OC动态机制"><a href="#OC动态机制" class="headerlink" title="OC动态机制"></a>OC动态机制</h2><p>即OC的动态类型、动态绑定和动态加载特性，将对象类型的确定、方法调用的确定、代码和资源的装载等推迟到运行时进行，更加灵活</p><h3 id="动态类型"><a href="#动态类型" class="headerlink" title="动态类型"></a>动态类型</h3><h4 id="什么是动态类型-？"><a href="#什么是动态类型-？" class="headerlink" title="什么是动态类型 ？"></a>什么是动态类型 ？</h4><p>动态类型指的是对象指针类型的动态性，对象类型的确定推迟到使用时。</p><h4 id="OC动态类型的表现"><a href="#OC动态类型的表现" class="headerlink" title="OC动态类型的表现"></a>OC动态类型的表现</h4><p>使用id任意类型将对象的类型确定推迟到运行时，由赋给它的对象类型决定对象指针的类型</p><h4 id="动态类型识别方法"><a href="#动态类型识别方法" class="headerlink" title="动态类型识别方法"></a>动态类型识别方法</h4><ul><li>Class类型</li><li>Class动态类型与类名字符串相互转换</li><li>内省Introspection特性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-(BOOL)isKindOfClass:class #(包含子类)</span><br><span class="line">-(BOOL)isMemberOfClass:class #(仅仅本类)</span><br></pre></td></tr></table></figure><ul><li>内省类中对应方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-(BOOL)respondsTosSelector:(SEL)selector &#x2F;&#x2F;是否有此方法包含静态方法</span><br><span class="line">-(BOOL)instanceRespondToSelector:(SEL)selector   &#x2F;&#x2F; 是否有此实例方法</span><br></pre></td></tr></table></figure><ul><li>方法名字符串和SEL类型的转换</li></ul><h3 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h3><p>动态绑定指的是方法确定的动态性，具体指的是利用OC的消息传递机制将要执行的方法推迟到运行时，可以动态的添加方法。</p><p>消息传递机制</p><ul><li><p>NSMethodSignature 用于记录一个方法的参数和返回值类型的类。类似于obj_method_description的结构体。方法签名是用于初始化NSInvocation用的。</p></li><li><p>NSInvocation 用于记录一个方法的接收者、方法名、参数类型、参数等信息，包含执行该消息方法的类。此类类似于结构体Method。</p></li></ul><p>消息转发机制<br>分成三步：</p><p>第一步检查是否实现了方法动态解析,添加新方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel;</span><br><span class="line"></span><br><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel;</span><br></pre></td></tr></table></figure><p>重写了此方法并添加新方法替代实现</p><p>第二步检查是否重写了转移消息接收者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector</span><br></pre></td></tr></table></figure><p>重复上面逻辑检查新对象</p><p>第三步如果没有新的接收对象则进行消息转发</p><p>重写NSMethodSignature,构造新的方法签名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</span><br></pre></td></tr></table></figure><p>根据新的方法签名，重写forwardInvocation进行转发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="动态加载"><a href="#动态加载" class="headerlink" title="动态加载"></a>动态加载</h3><ul><li><p>资源动态加载</p></li><li><p>可执行代码模块动态加载</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;OC动态机制&quot;&gt;&lt;a href=&quot;#OC动态机制&quot; class=&quot;headerlink&quot; title=&quot;OC动态机制&quot;&gt;&lt;/a&gt;OC动态机制&lt;/h2&gt;&lt;p&gt;即OC的动态类型、动态绑定和动态加载特性，将对象类型的确定、方法调用的确定、代码和资源的装载等推迟到运行时进</summary>
      
    
    
    
    <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>iPa包优化</title>
    <link href="http://yoursite.com/2020/08/18/%E5%8C%85%E5%A4%A7%E5%B0%8F/"/>
    <id>http://yoursite.com/2020/08/18/%E5%8C%85%E5%A4%A7%E5%B0%8F/</id>
    <published>2020-08-18T06:18:05.884Z</published>
    <updated>2020-08-18T06:18:05.884Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iPa包大小优化"><a href="#iPa包大小优化" class="headerlink" title="iPa包大小优化"></a>iPa包大小优化</h2><p>具体工作分解</p><ol><li>分析包大小具体组成成员，以及各自占有大小</li><li>分析打包时各个构成构建时对包大小的影响</li><li>优化各个构成成员</li><li>编译选项优化</li></ol><h3 id="iPa包构成"><a href="#iPa包构成" class="headerlink" title="iPa包构成"></a>iPa包构成</h3><p>我们解压iPa包后，可以看到iPa包主要由以下几类组成</p><pre><code>1.可执行文件2. .car、.nib、.bundle、Localizable.strings等资源文件3. _CodeSignature签名相关文件</code></pre><h3 id="主工程优化"><a href="#主工程优化" class="headerlink" title="主工程优化"></a>主工程优化</h3><ul><li>资源优化</li></ul><p>未优化前98.6M<br>优化图片后97.7M</p><p>压缩图片资源 3.5M</p><ul><li>代码分析，编译后可执行文件大小，选取占空间比较大（以100KB为参考）进行优化</li></ul><table><thead><tr><th align="center">名称</th><th align="center">优化前大小</th><th align="center">优化后大小</th><th align="center">优化空间</th></tr></thead><tbody><tr><td align="center">WowChatSDK</td><td align="center">4.56MB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">PLShortVideoKit</td><td align="center">1.08MB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">libWeChatSDK.a</td><td align="center">499.60KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">Bugly</td><td align="center">449.51KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">UMShare</td><td align="center">352.79KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">ZBTradeContentView.o</td><td align="center">344.60KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">lto.o</td><td align="center">329.48KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">CHKLineChart.o</td><td align="center">296.16KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">UMAnalytics</td><td align="center">235.28KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">UMCommon</td><td align="center">235.09KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">MarketTableViewCell.o</td><td align="center">218.66KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">RemoteService.o</td><td align="center">207.99KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">libMuseProcessor.a</td><td align="center">194.97KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">ZBVideoAuthViewController.o</td><td align="center">170.28KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">ZBMarketViewController.o</td><td align="center">166.35KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">SecurityEnvSDK</td><td align="center">148.59KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">ZBEntrustDetailViewController.o</td><td align="center">145.22KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">ZBTradeExchangeViewController.o</td><td align="center">143.72KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">ZBFlutterShareVC.o</td><td align="center">132.75KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">ZBHandicapMainView.o</td><td align="center">130.31KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">CHDepthChartView.o    129.68KB</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">CHChartModel.o</td><td align="center">125.72KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">ZBKlineTableViewCell.o</td><td align="center">125.32KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">VerifyCode</td><td align="center">124.10KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">CHSlideHeaderView.o</td><td align="center">117.97KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">Constants.o</td><td align="center">117.87KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">ZBFullScreenKlineViewController.o</td><td align="center">116.52KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">ZBEntrustExpandCell.o</td><td align="center">115.90KB</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">ZBKlineViewController.o</td><td align="center">104.66KB</td><td align="center"></td><td align="center"></td></tr></tbody></table><p>没有尽数列举出来，总共19.22MB。代码整理这一块需要一起参与，各自负责整理各自部分。</p><h3 id="WowChatSDK对包大小影响及优化"><a href="#WowChatSDK对包大小影响及优化" class="headerlink" title="WowChatSDK对包大小影响及优化"></a>WowChatSDK对包大小影响及优化</h3><table><thead><tr><th align="center">有无WowChatSDK</th><th align="center">SDK版本</th><th align="center">包大小</th><th align="center">优化项</th></tr></thead><tbody><tr><td align="center">无</td><td align="center">无</td><td align="center">33KB</td><td align="center">无</td></tr><tr><td align="center">有</td><td align="center">1.4.2</td><td align="center">9.7M</td><td align="center">无</td></tr><tr><td align="center">有</td><td align="center">1.4.4</td><td align="center">9.3M</td><td align="center">SDK图片压缩</td></tr><tr><td align="center">有</td><td align="center">1.4.5</td><td align="center">8.5M</td><td align="center">删除部分无用代码</td></tr></tbody></table><p>WowChatSDK对包的影响大概是8.5M</p><p>图片和无用类减小了1.2M</p><h3 id="Flutter混编对包的影响及优化"><a href="#Flutter混编对包的影响及优化" class="headerlink" title="Flutter混编对包的影响及优化"></a>Flutter混编对包的影响及优化</h3><p>Flutter的framework大概占有 3.4M</p><p>Flutter代码资源打包占18M</p><p>压缩图片资源 9.1MB</p><p>Flutter（包含聊天SDK）优化过程如下</p><table><thead><tr><th align="center">影响包大小</th><th align="center">是否优化</th><th align="center">优化项目</th></tr></thead><tbody><tr><td align="center">27M</td><td align="center">否</td><td align="center">无</td></tr><tr><td align="center">18.1M</td><td align="center">是</td><td align="center">图片压缩</td></tr></tbody></table><p>图片减小包大小9M左右</p><h3 id="编译选项优化"><a href="#编译选项优化" class="headerlink" title="编译选项优化"></a>编译选项优化</h3><ul><li>编译选项：LTO，即Link Time Optimization。</li></ul><p>苹果在2016年的WWDC What’s new in LLVM中详细介绍了这一功能。LTO能带来的优化有：</p><pre><code>1. 将一些函数內联化2. 去除了一些无用代码3. 对程序有全局的优化作用</code></pre><ul><li>Build Settings-&gt;Optimization</li></ul><p>Level有几个编译优化选项，release版应该选择Fastest, Smalllest，这个选项会开启那些不增加代码大小的全部优化，并让可执行文件尽可能小，当然这些编译项早期是在工程生成时候xcode默认给工程配置好了，如果一旦xcode做了改变我们要知道这些东西。</p><ul><li>Strip Linked Product / Deployment Postprocessing / Symbols</li></ul><p>Hidden by Default在release版本应该设为yes，可以去除不必要的调试符号。Symbols Hidden by</p><p>Default会把所有符号都定义成”private extern”。这些选项目前都是XCode里release的默认选项，但旧版XCode生成的项目可能不是，可以检查一下</p><h5 id="优化工具"><a href="#优化工具" class="headerlink" title="优化工具"></a>优化工具</h5><p>检测工具（项目中未使用的图片）：LSUnusedResources (<a href="https://github.com/tinymind/LSUnusedResources)%EF%BC%89">https://github.com/tinymind/LSUnusedResources)）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;iPa包大小优化&quot;&gt;&lt;a href=&quot;#iPa包大小优化&quot; class=&quot;headerlink&quot; title=&quot;iPa包大小优化&quot;&gt;&lt;/a&gt;iPa包大小优化&lt;/h2&gt;&lt;p&gt;具体工作分解&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分析包大小具体组成成员，以及各自占有大小&lt;/li&gt;
</summary>
      
    
    
    
    <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>深入浅出OC响应者链</title>
    <link href="http://yoursite.com/2020/08/18/%E5%93%8D%E5%BA%94%E8%80%85%E9%93%BE/"/>
    <id>http://yoursite.com/2020/08/18/%E5%93%8D%E5%BA%94%E8%80%85%E9%93%BE/</id>
    <published>2020-08-18T06:18:05.880Z</published>
    <updated>2020-08-18T06:18:05.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="深入浅出OC响应者链"><a href="#深入浅出OC响应者链" class="headerlink" title="深入浅出OC响应者链"></a>深入浅出OC响应者链</h2><p>所谓响应者链就是由多个响应者组合起来的链条。它表示了每个响应者之间的联系，并且可使得一个事件可选择多个对象处理。</p><p>当点击了屏幕产生一个触摸事件，消息循环（runloop）会接收到触摸事件并放到消息队列里，UIApplication会从消息队列里取出事件分发下去，首先传给UIWindow.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIWindow会使用hitTest:withEvent</span><br></pre></td></tr></table></figure><p>方法找到此次触摸事件初始点所在视图，找到视图后会调用视图的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touchesBegan：withEvent</span><br></pre></td></tr></table></figure><p>方法处理事件</p><h4 id="UIApplication分发事件是怎么找到此次触摸事件初识点所在视图？"><a href="#UIApplication分发事件是怎么找到此次触摸事件初识点所在视图？" class="headerlink" title="UIApplication分发事件是怎么找到此次触摸事件初识点所在视图？"></a>UIApplication分发事件是怎么找到此次触摸事件初识点所在视图？</h4><p>我们假设视图结构是 UIWindow.subviews &gt; ParentView &gt; SubviewA &amp; SubviewB, 并且我们点击了视图A，那么寻找此次触摸事件初始视图的顺序大概如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runloop -&gt; UIWindow -&gt; ParentView -&gt; SubViewB -&gt; SubViewA</span><br></pre></td></tr></table></figure><p>UIApplication先从消息队列取出事件传给UIWindow,UIWindow调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hitTest:withEvent-&gt;调用pointInside:withEvent</span><br></pre></td></tr></table></figure><p>如果返回1说明此次事件</p><p>由此视图或者其子视图触发。然后调用其子类（从后开始遍历）的hitTe</p><p>st方法重复上面逻辑。如果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pointInside:withEvent</span><br></pre></td></tr></table></figure><p>返回false,则hitTes</p><p>t:withEvent返回nil.然后调用其他子类相关方法。直到调用的视图没有</p><p>子类。如果最后的子类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pointInside:withEvent</span><br></pre></td></tr></table></figure><p>方法返回true.则通过hitTest：withEvent 一层一层返回给UIWindow，并调用他的touchBegan:wi</p><p>thEvent方法</p><h4 id="我们如果要改变一个事件的处理对象有很多方法可以实现"><a href="#我们如果要改变一个事件的处理对象有很多方法可以实现" class="headerlink" title="我们如果要改变一个事件的处理对象有很多方法可以实现"></a>我们如果要改变一个事件的处理对象有很多方法可以实现</h4><ul><li>通过传递响应者 nextResponder</li><li>重写hitTest: withEvent方法</li><li>重写pointInSide: withEvent方法</li></ul><p>ps: 以下情况控件将不能响应</p><ul><li>userInteractionEnabled = NO</li><li>hidden = YES</li><li>透明度 &lt;= 0.01</li><li>子视图超出了父视图区域</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;深入浅出OC响应者链&quot;&gt;&lt;a href=&quot;#深入浅出OC响应者链&quot; class=&quot;headerlink&quot; title=&quot;深入浅出OC响应者链&quot;&gt;&lt;/a&gt;深入浅出OC响应者链&lt;/h2&gt;&lt;p&gt;所谓响应者链就是由多个响应者组合起来的链条。它表示了每个响应者之间的联系，并</summary>
      
    
    
    
    <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS三方包管理</title>
    <link href="http://yoursite.com/2020/08/18/iOS%E4%B8%89%E6%96%B9%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2020/08/18/iOS%E4%B8%89%E6%96%B9%E5%8C%85%E7%AE%A1%E7%90%86/</id>
    <published>2020-08-18T05:50:27.000Z</published>
    <updated>2020-08-18T06:18:05.888Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Carthage"><a href="#Carthage" class="headerlink" title="Carthage"></a>Carthage</h3><h3 id="cocoapods-安装"><a href="#cocoapods-安装" class="headerlink" title="cocoapods 安装"></a>cocoapods 安装</h3><p>由于国内屏蔽，需要替换镜像:<br>查看本机源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources -l</span><br></pre></td></tr></table></figure><p>删除源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem source -r ***</span><br></pre></td></tr></table></figure><p>添加源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources --add https:&#x2F;&#x2F;gems.ruby-china.com</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install cocoapods</span><br></pre></td></tr></table></figure><h3 id="cocoapods-卸载"><a href="#cocoapods-卸载" class="headerlink" title="cocoapods 卸载"></a>cocoapods 卸载</h3><p>首先执行，卸载cocoapods</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem uninstall cocoapods</span><br></pre></td></tr></table></figure><p>然后清理安装的cocoapods相关工具,执行下面命令后逐个删除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem list pod</span><br></pre></td></tr></table></figure><p>```<br>sudo gem uninstall</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Carthage&quot;&gt;&lt;a href=&quot;#Carthage&quot; class=&quot;headerlink&quot; title=&quot;Carthage&quot;&gt;&lt;/a&gt;Carthage&lt;/h3&gt;&lt;h3 id=&quot;cocoapods-安装&quot;&gt;&lt;a href=&quot;#cocoapods-安装&quot; cla</summary>
      
    
    
    
    <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
</feed>
